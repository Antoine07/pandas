{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Suppression et sélection\n",
    "\n",
    "## Suppression de valeur dans une série méthode drop\n",
    "\n",
    "Vous pouvez supprimer une valeur ou des valeurs dans une série à l'aide de la méthode drop.\n",
    "\n",
    "```python\n",
    "s = pd.Series(np.arange(5.), index=['a', 'b', 'c', 'd', 'e'])\n",
    "\n",
    "# supprime une valeur\n",
    "new_s = s.drop('c')\n",
    "\n",
    "# supprime un ensemble de valeurs\n",
    "new_s = s.drop(['a', 'c'])\n",
    "```\n",
    "\n",
    "## Sélection de valeurs dans une série\n",
    "\n",
    "Pour la sélection vous pouvez accéder à une valeur à l'aide de son index numérique ou nommé :\n",
    "\n",
    "```python\n",
    "s = pd.Series( np.arange(4, 8), index=['a', 'b', 'c', 'd'] )\n",
    "\n",
    "\"\"\"\n",
    "a    4\n",
    "b    5\n",
    "c    6\n",
    "d    7\n",
    "\"\"\"\n",
    "\n",
    "# affichera 4\n",
    "s[0]\n",
    "\n",
    "# affichera 4 également\n",
    "s['a']\n",
    "```\n",
    "\n",
    "### \"Slicing\" sur les séries Pandas\n",
    "\n",
    "Par rapport aux listes Python la syntaxe est légèrement différente avec les séries, voyez les exemples suivants :\n",
    "\n",
    "```python\n",
    "s['a':'c']\n",
    "\n",
    "\"\"\"\n",
    "a    4\n",
    "b    5\n",
    "c    6\n",
    "\"\"\"\n",
    "```\n",
    "\n",
    "Ci-dessous, tous les index jusqu'à c, un index sur 2 :\n",
    "\n",
    "```python\n",
    "s[:'c':2]\n",
    "\n",
    "\"\"\"\n",
    "a    4\n",
    "c    6\n",
    "\"\"\"\n",
    "```\n",
    "\n",
    "Sur l'objet série il est également possible de sélectionner les valeurs selon un ordre souhaité :\n",
    "\n",
    "```python\n",
    "s[['b', 'a', 'b']]\n",
    "\n",
    "\"\"\"\n",
    "b    5\n",
    "a    4\n",
    "b    5\n",
    "\"\"\"\n",
    "```\n",
    "\n",
    "Ceci marchera également avec les index numériques :\n",
    "\n",
    "```python\n",
    "s[[2, 1, 2]]\n",
    "\n",
    "\"\"\"\n",
    "b    5\n",
    "a    4\n",
    "b    5\n",
    "\"\"\"\n",
    "```\n",
    "\n",
    "On peut également appliquer de l'indexation avancée sur une série ainsi dans l'exemple suivant on sélectionne toutes les valeurs supérieures à 4 et inférieures à 6 :\n",
    "\n",
    "```python\n",
    "s[ (s > 4) & (s < 6) ]\n",
    "\"\"\"\n",
    "b    5\n",
    "\"\"\"\n",
    "```\n",
    "\n",
    "## Méthode sum\n",
    "\n",
    "Par défaut la méthode *sum* de Pandas sur une série ignore les valeurs NaN.\n",
    "\n",
    "```python\n",
    "\n",
    "pd.Series([]).sum()\n",
    "# 0\n",
    "\n",
    "pd.Series([np.nan]).sum()\n",
    "# 0\n",
    "```\n",
    "\n",
    "Il existe un paramètre **min_count** qui vaut soit 0 (valeur par défaut) soit 1.\n",
    "\n",
    "Si vous mettez la valeur **min_count** à 1 alors vous aurez les résultats suivants :\n",
    "\n",
    "```python\n",
    "pd.Series([np.nan, np.nan, np.nan]).sum(min_count = 1)\n",
    "# nan\n",
    "\n",
    "pd.Series([np.nan, np.nan, np.nan, 9]).sum(min_count = 1)\n",
    "# 9\n",
    "\n",
    "pd.Series([]).sum(min_count = 1)\n",
    "# nan\n",
    "```\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
